"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _util = require("./util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultOptions = {
  selector: 'img'
};

var LazyContainer = /*#__PURE__*/function () {
  function LazyContainer(_ref) {
    var el = _ref.el,
        binding = _ref.binding,
        vnode = _ref.vnode,
        lazy = _ref.lazy;
    (0, _classCallCheck2.default)(this, LazyContainer);
    this.el = null;
    this.vnode = vnode;
    this.binding = binding;
    this.options = {};
    this.lazy = lazy;
    this._queue = [];
    this.update({
      el: el,
      binding: binding
    });
  }

  (0, _createClass2.default)(LazyContainer, [{
    key: "update",
    value: function update(_ref2) {
      var _this = this;

      var el = _ref2.el,
          binding = _ref2.binding;
      this.el = el;
      this.options = _objectSpread(_objectSpread({}, defaultOptions), binding.value);
      var imgs = this.getImgs();
      imgs.forEach(function (el) {
        _this.lazy.add(el, _objectSpread(_objectSpread({}, _this.binding), {}, {
          value: {
            src: 'dataset' in el ? el.dataset.src : el.getAttribute('data-src'),
            error: ('dataset' in el ? el.dataset.error : el.getAttribute('data-error')) || _this.options.error,
            loading: ('dataset' in el ? el.dataset.loading : el.getAttribute('data-loading')) || _this.options.loading
          }
        }), _this.vnode);
      });
    }
  }, {
    key: "getImgs",
    value: function getImgs() {
      return (0, _util.ArrayFrom)(this.el.querySelectorAll(this.options.selector));
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this2 = this;

      var imgs = this.getImgs();
      imgs.forEach(function (el) {
        return _this2.lazy.remove(el);
      });
      this.vnode = null;
      this.binding = null;
      this.lazy = null;
    }
  }]);
  return LazyContainer;
}();

var LazyContainerMananger = /*#__PURE__*/function () {
  function LazyContainerMananger(_ref3) {
    var lazy = _ref3.lazy;
    (0, _classCallCheck2.default)(this, LazyContainerMananger);
    this.lazy = lazy;
    lazy.lazyContainerMananger = this;
    this._queue = [];
  }

  (0, _createClass2.default)(LazyContainerMananger, [{
    key: "bind",
    value: function bind(el, binding, vnode) {
      var container = new LazyContainer({
        el: el,
        binding: binding,
        vnode: vnode,
        lazy: this.lazy
      });

      this._queue.push(container);
    }
  }, {
    key: "update",
    value: function update(el, binding, vnode) {
      var container = (0, _util.find)(this._queue, function (item) {
        return item.el === el;
      });
      if (!container) return;
      container.update({
        el: el,
        binding: binding,
        vnode: vnode
      });
    }
  }, {
    key: "unbind",
    value: function unbind(el) {
      var container = (0, _util.find)(this._queue, function (item) {
        return item.el === el;
      });
      if (!container) return;
      container.clear();
      (0, _util.remove)(this._queue, container);
    }
  }]);
  return LazyContainerMananger;
}();

exports.default = LazyContainerMananger;